// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum UserRole {
  ADMIN
  USER
}


model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  saveFoods     SaveFood[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}


model Food {
  id                  String @id @default(uuid())
  name                String
  description         String
  calories            Int?
  protein             Float?
  fat                 Float?
  carbohydrates       Float?
  category            Category @default(LAINNYA)
  portion             Portion?
  berat               String?
  energiKj            Float?
  energiKl            Float?
  lemakJenuh          Float?
  lemakTakJenuhG      Float?
  lemakTakJenuhT      Float?
  kolestrol           Int?
  serat               Float?
  gula                Float?
  sodium              Int?
  kalium              Int?
  imagePath           String?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
}

enum Category {
  LAINNYA
  BIJI_BIJIAN
  BUAH
  DAGING
  IKAN_DAN_SEAFOOD
  KACANG_KACANGAN
  KEJU_DAN_SUSU
  MAKANAN_CEPAT_SAJI
  MAKANAN_PENUTUP
  MINUMAN
  NASI_DAN_MIE
  ROTI_DAN_SEREAL
  SALAD
  SAUS_DAN_BUMBU
  SAYURAN
  SUP
  TELUR
}

enum Portion {
  all
  SATU_BESAR
  SATU_SDM
  SERATUS_GRAM
  SATU_BUAH
  SATU_PORSI
  SATU_MANGKOK
  SATU_SEDANG
  SATU_KECIL
  SATU_BUNGKUS
}


model SaveFood{
  id                  String @id @default(uuid())
  name                String
  classCounts         Json?
  calories            Int?
  protein             Float?
  fat                 Float?
  carbohydrates       Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  userId              String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FeedBack {
  id                  String @id @default(uuid())
  description         String
}